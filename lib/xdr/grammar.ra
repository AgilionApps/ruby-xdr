# Copyright (C) 2010 Red Hat Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

# A parser for the XDR language defined in RFC 4506
# Note that this parser does not currently support the extended RPC language
# defined in RFC 5531. However, it does reserve the keywords 'program' and
# 'version'.

class XDR::Parser

# Non-keywords
token IDENT CONSTANT

# Keywords
token BOOL CASE CONST DEFAULT DOUBLE ENUM FLOAT HYPER INT OPAQUE QUADRUPLE
token STRING STRUCT SWITCH TYPEDEF UNION UNSIGNED VOID

# Keywords from RFC 5531, reserved but not used
token PROGRAM VERSION

# Keywords implicit in definition of Boolean
token TRUE FALSE

rule
specification:
      definition
      { result = [val[0]] }
    | specification definition
      { result = val[0].push(val[1]) }

declaration:
      type_specifier IDENT
      { result = [val[0], val[1]] }
    | type_specifier IDENT '[' value ']'
      { result = [XDR::AST::Array.new(val[0].context, val[0], val[3]), val[1]] }
    | type_specifier IDENT '<' value '>'
      { result = [XDR::AST::VarArray.new(val[0].context,
                                         val[0], val[3]), val[1]] }
    | type_specifier IDENT '<' '>'
      { result = [XDR::AST::VarArray.new(val[0].context, val[0]), val[1]] }
    | OPAQUE IDENT '[' value ']'
      { result = [XDR::AST::Opaque.new(val[0].context, val[3]), val[1]] }
    | OPAQUE IDENT '<' value '>'
      { result = [XDR::AST::VarOpaque.new(val[0].context, val[3]), val[1]] }
    | OPAQUE IDENT '<' '>'
      { result = [XDR::AST::VarOpaque.new(val[0].context), val[1]] }
    | STRING IDENT '<' value '>'
      { result = [XDR::AST::String.new(val[0].context, val[3]), val[1]] }
    | STRING IDENT '<' '>'
      { result = [XDR::AST::String.new(val[0].context), val[1]] }
    | type_specifier '*' IDENT
      { result = [XDR::AST::Optional.new(val[0].context, val[0]), val[2]] }
    | VOID
      { result = [XDR::AST::Void.new(val[0].context), nil] }

value:
      constant
      { result = val[0] }
    | IDENT
      { result = XDR::AST::ConstRef.new(val[0].context, val[0]) }

constant:
      CONSTANT
      { result = val[0] }
    | TRUE
      { result = XDR::Token.new(1, val[0].context) }
    | FALSE
      { result = XDR::Token.new(0, val[0].context) }

type_specifier:
      INT
      { result = XDR::AST::Integer.new(val[0].context) }
    | UNSIGNED INT
      { result = XDR::AST::UnsignedInteger.new(val[0].context) }
    | HYPER
      { result = XDR::AST::Hyper.new(val[0].context) }
    | UNSIGNED HYPER
      { result = XDR::AST::UnsignedHyper.new(val[0].context) }
    | FLOAT
      { result = XDR::AST::Float.new(val[0].context) }
    | DOUBLE
      { result = XDR::AST::Double.new(val[0].context) }
    | QUADRUPLE
      { result = XDR::AST::Quadruple.new(val[0].context) }
    | BOOL
      { result = XDR::AST::Boolean.new(val[0].context) }
    | enum_type_spec
      { result = val[0] }
    | struct_type_spec
      { result = val[0] }
    | union_type_spec
      { result = val[0] }
    | IDENT
      { result = XDR::AST::TypeRef.new(val[0].context, val[0]) }

enum_type_spec:
      ENUM enum_body
      { result = XDR::AST::Enumeration.new(val[0].context, val[1]) }

enum_body:
      '{' enum_list '}'
      { result = val[1] }

# This doesn't seem to be allowed by the RFC, but rpcgen (at least on my Fedora
# system) allows enumerations without explicit values
enum_value:
      IDENT '=' value
      { result = [val[0], val[2]] }
    | IDENT
      { result = [val[0], nil] }

enum_list:
      enum_value
      { result = [val[0]] }
    | enum_list ',' enum_value
      { result = val[0].push(val[2]) }

struct_type_spec:
      STRUCT struct_body
      { result = XDR::AST::Structure.new(val[0].context, val[1]) }

struct_body:
      '{' declaration_list '}'
      { result = val[1] }

declaration_list:
      declaration ';'
      { result = [val[0]] }
    | declaration_list declaration ';'
      { result = val[0].push(val[1]) }

union_type_spec:
      UNION union_body
      { result = XDR::AST::Union.new(val[0].context,
                                     val[1][0], val[1][1], val[1][2] ) }

union_body:
      SWITCH '(' declaration ')' '{' switch_body '}'
      { result = [val[2].first, val[5][0], val[5][1]] }

switch_body:
      case_list
      { result = [val[0], nil] }
    | case_list case_default
      { result = [val[0], val[1]] }

case_list:
      case_spec declaration ';'
      { result = [ val[0], val[1] ] }
    | case_list case_spec declaration ';'
      { result = val[0].push([val[1], val[2]]) }

case_spec:
      CASE value ':'
      { result = [val[1]] }
    | case_spec CASE value ':'
      { result = val[0].push(val[2]) }

case_default:
      DEFAULT ':' declaration ';'
      { result = val[2] }

constant_def:
      CONST IDENT '=' constant ';'
      { result = XDR::AST::Constant.new(val[0].context, self, val[1], val[3]) }

type_def:
      TYPEDEF declaration ';'
      { result = XDR::AST::Typedef.new(val[0].context, self,
                                       val[1][1], val[1][0]) }
    | ENUM IDENT enum_body ';'
      { enum = XDR::AST::Enumeration.new(val[0].context, val[2])
        result = XDR::AST::Typedef.new(val[0].context, self, val[1], enum) }
    | STRUCT IDENT struct_body ';'
      { struct = XDR::AST::Structure.new(val[0].context, val[2])
        result = XDR::AST::Typedef.new(val[0].context, self, val[1], struct) }
    | UNION IDENT union_body ';'
      { union = XDR::AST::Union.new(val[0].context,
                                    val[2][0], val[2][1], val[2][2])
        result = XDR::AST::Typedef.new(val[0].context, self, val[1], union) }

definition:
      type_def
      { result = val[0] }
    | constant_def
      { result = val[0] }

end

---- header ----

require 'xdr'
require 'xdr/ast'

---- inner ----

# Move code which doesn't require compilation by racc into a separate file
require 'xdr/parser_support'

# vim: syntax=racc
